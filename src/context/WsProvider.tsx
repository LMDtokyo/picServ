// üìÅ src/context/WsProvider.tsx
import React, { createContext, ReactNode, useState, useContext, useEffect } from "react";
import { SocketManager } from "../socket/SocketManager";

interface WsContextValue {
    // –î–µ—Ä–∂–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ä–µ–Ω—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é).
    arena?: any;
    myResources?: any[];
    mySkills?: any[];
    currentArenaId?: number;
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    subscribeArena: (arenaId: number) => void;
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
    unsubscribeArena: () => void;
}

// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const WsContext = createContext<WsContextValue | undefined>(undefined);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä
export const WsProvider = ({ children }: { children: ReactNode }) => {
    // –°—é–¥–∞ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å WebSocket (arena:update).
    const [currentArenaId, setCurrentArenaId] = useState<number | undefined>(undefined);

    // –ù–∞–ø—Ä–∏–º–µ—Ä, arenaState:
    const [arena, setArena] = useState<any>(null);
    const [myResources, setMyResources] = useState<any[]>([]);
    const [mySkills, setMySkills] = useState<any[]>([]);

    // –ü–æ–¥–ø–∏—Å–∫–∞. –•—Ä–∞–Ω–∏–º –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
    const [handler, setHandler] = useState<((payload: any) => void) | null>(null);

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    const subscribeArena = (arenaId: number) => {
        if (currentArenaId === arenaId) {
            // –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ç –∂–µ arenaId ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return;
        }
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ (–µ—Å–ª–∏ –±—ã–ª)
        unsubscribeArena();

        const channelKey = `arena:${arenaId}`;
        const newHandler = (payload: any) => {
            // payload: { id, logs, participants, usersData {...} }
            setArena({
                id: payload.id,
                logs: payload.logs,
                participants: payload.participants,
            });
            // –ï—Å–ª–∏ –Ω–∞–¥–æ, –¥–æ—Å—Ç–∞—ë–º userId –∏–∑ auth –∏–ª–∏ –∏–∑ localStorage
            // –ù–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å userId=1 (–ò–õ–ò —Å–¥–µ–ª–∞–µ–º dynamic)
            // –õ—É—á—à–µ —Å–¥–µ–ª–∞–π—Ç–µ userId –≥–ª–æ–±–∞–ª—å–Ω–æ,
            //   const { user } = useAuth();
            //   const myId = user?.id;

            // –ü—Ä–∏–º–µ—Ä: –ø—É—Å—Ç—å userId = 1 (–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
            const userId = 1;
            if (payload.usersData && payload.usersData[userId]) {
                const myData = payload.usersData[userId];
                setMyResources(myData.resources);
                setMySkills(myData.skills);
            }
        };

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º arenaId
        setCurrentArenaId(arenaId);
        setHandler(() => newHandler);

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
        SocketManager.subscribe(channelKey, newHandler);
        console.log("WsProvider: Subscribed to", channelKey);
    };

    const unsubscribeArena = () => {
        if (currentArenaId && handler) {
            const key = `arena:${currentArenaId}`;
            SocketManager.unsubscribe(key, handler);
            console.log("WsProvider: Unsubscribed from", key);
        }
        setCurrentArenaId(undefined);
        setHandler(null);
        setArena(null);
        setMyResources([]);
        setMySkills([]);
    };

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    return (
        <WsContext.Provider
            value={{
                arena,
                myResources,
                mySkills,
                currentArenaId,
                subscribeArena,
                unsubscribeArena,
            }}
        >
            {children}
        </WsContext.Provider>
    );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useWs = () => {
    const context = useContext(WsContext);
    if (!context) {
        throw new Error("useWs must be used within a WsProvider");
    }
    return context;
};
